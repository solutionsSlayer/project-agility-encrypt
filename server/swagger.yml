swagger: "2.0"
info:
  description: This application provide APIs which will be used by the reactjs app. With theses we will be able to encrypt and decrypt messages with a key
  version: "1.0.5"
  title: Logo - API
basePath: /api
tags:
  - name: Cryptography
    description: Encryption / Decryption API
schemes:
  - http
  - https
paths:
  /encrypt:
    post:
      tags:
        - Cryptography
      summary: Encrypt a message with key
      description:
      operationId: Encrypt
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: text
          in: formData
          description: Message to be encrypt
          required: true
          type: string
          format: utf-8
        - name: key
          in: formData
          description: Encryption key
          required: true
          type: string
          format: utf-8
        - name: algorithm
          in: formData
          description: "Encryption algorithm (Allowed: AES, DES, TripleDES, Rabbit, RC4, RC4Drop)"
          required: true
          schema:
            type: string
            enum: ["AES", "DES", "TripleDES", "Rabbit", "RC4", "RC4Drop"]
            example: AES
      responses:
        200:
          description: return the text encrypted with key
          schema:
            $ref: "#/definitions/EncryptedReturn"
        422:
          description: when data entered is incomplete or wrong
          schema:
            $ref: "#/definitions/UnprocessableEntity"
  /decrypt:
    post:
      tags:
        - Cryptography
      summary: Decrypt a message with key
      description:
      operationId: Decrypt
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: text
          in: formData
          description: Message to be decrypt
          required: true
          type: string
          format: utf-8
        - name: key
          in: formData
          description: Eecryption key
          required: true
          type: string
          format: utf-8
        - name: algorithm
          in: formData
          description: "Encryption algorithm (Allowed: AES, DES, TripleDES, Rabbit, RC4, RC4Drop)"
          required: true
          schema:
            type: string
            enum: ["AES", "DES", "TripleDES", "Rabbit", "RC4", "RC4Drop"]
            example: AES
      responses:
        200:
          description: return the text decrypted with key
          schema:
            $ref: "#/definitions/DecryptedReturn"
        422:
          description: when data entered is incomplete or wrong
          schema:
            $ref: "#/definitions/UnprocessableEntity"
definitions:
  EncryptedReturn:
    type: object
    properties:
      encrypted:
        type: string
        example: U2FsdGVkX1/K86MC+O7e2EBgsFzXft2Vv9vFbBqVLgs=
  DecryptedReturn:
    type: object
    properties:
      decrypted:
        type: string
        example: test
  UnprocessableEntity:
    type: object
    properties:
      error:
        type: string
        example: Cannot process with this data